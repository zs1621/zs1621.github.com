<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: translation | 三余无梦]]></title>
  <link href="http://zs1621.github.io/blog/categories/translation/atom.xml" rel="self"/>
  <link href="http://zs1621.github.io/"/>
  <updated>2014-07-19T19:26:39+08:00</updated>
  <id>http://zs1621.github.io/</id>
  <author>
    <name><![CDATA[admin]]></name>
    <email><![CDATA[zs1213yh@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[First 5 minutes troubleshooting server translate ]]></title>
    <link href="http://zs1621.github.io/blog/2014/07/19/first-5-minutes-troubleshooting-server-translate/"/>
    <updated>2014-07-19T17:09:13+08:00</updated>
    <id>http://zs1621.github.io/blog/2014/07/19/first-5-minutes-troubleshooting-server-translate</id>
    <content type="html"><![CDATA[<blockquote><p><a href="http://devo.ps/blog/troubleshooting-5minutes-on-a-yet-unknown-box/">原文</a></p></blockquote>

<h2><strong>服務器遇到問題,從何下手?</strong></h2>

<p>不要急着衝向你的服務器， 在這之前， 你對它和具體的問題了解多少？</p>

<p>必須知道的</p>

<ul>
<li>問題的確切症狀? 丟包? 錯誤?</li>
<li>問題什麼時候被發現?</li>
<li>可以重現麼?</li>
<li>有什麼規律(例如每小時發生一次)?</li>
<li>在服務器的最後一次改變(代碼， 服務配置, 內存)?</li>
<li>問題會影響客戶的哪個部分(登錄， 註銷， )?</li>
<li><strong>有監控平臺麼?</strong> Munin, Zabbix, Nagios, NewRelic..</li>
<li><strong>日志(集中化)?</strong> Loggly, Airbrake, Graylog</li>
</ul>


<p>上面的最後兩項是最方便直觀的信息來源， 但也別期望太多;爲了搞定問題，繼續往下看</p>

<p><strong>誰登陸了?</strong></p>

<p><code>
$ w
$ last
</code></p>

<p>不是很重要， 但是你在找問題時不希望還有其他人在擺弄的服務器。廚房裏一個廚師足矣</p>

<p><strong>之前做了哪些操作?</strong></p>

<p><code>
$ history
</code></p>

<p>看歷史記錄總是好的;配合之前誰在操作的命令.</p>

<p>快速回憶一下， 你也許小要升級環境變量 <code>HISTTIMEFORMAT</code> 去跟蹤那些命令運行的時刻.沒什麼比調查一個過期命令列表更讓人沮喪的了。</p>

<p><strong>正在運行哪些程序i?</strong></p>

<p><code>
$ pstree -a
$ ps aux
</code></p>

<p>如果覺得<code>ps aux</code>太羅嗦， <code>pstree -a</code>會給你一個漂亮的展示關於什麼正在運行以及誰調用了它</p>

<p><strong>監聽服務</strong></p>

<p><code>
$ netstat -ntlp  # t: tcp
$ netstat -nulp  # u: udp
$ netstat -nxlp  # x: unix socket
</code></p>

<p>我更傾向分開運行這些命令， 主要是因爲不喜歡同時看所有的服務。雖然<code>netstat -nalp</code>以可以做到。甚至我會省略<code>數字化</code>選項(IPs是易讀點的)</p>

<p>確定正在運行的服務以及他們是否應該運行。尋找多個監聽端口。通過<code>ps aux</code>的輸出匹配進程ID；這個是很有用的特別當你同時結束2~3個Java 或者 Erlang進程</p>

<p>TBC</p>
]]></content>
  </entry>
  
</feed>
